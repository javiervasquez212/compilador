
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiler;

import java.util.List;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.io.StringWriter;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\004\004" +
    "\000\002\004\003\000\002\056\002\000\002\057\002\000" +
    "\002\003\013\000\002\060\002\000\002\005\012\000\002" +
    "\006\004\000\002\013\003\000\002\013\005\000\002\013" +
    "\002\000\002\007\004\000\002\012\004\000\002\012\002" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\021\005\000\002\021\006" +
    "\000\002\020\005\000\002\020\003\000\002\042\003\000" +
    "\002\042\003\000\002\024\007\000\002\025\010\000\002" +
    "\043\006\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\015\004\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\044\005\000\002\050\011\000\002" +
    "\045\004\000\002\045\002\000\002\051\011\000\002\052" +
    "\006\000\002\052\002\000\002\061\002\000\002\046\016" +
    "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
    "\002\054\003\000\002\054\003\000\002\062\002\000\002" +
    "\063\002\000\002\047\015\000\002\016\005\000\002\016" +
    "\006\000\002\016\006\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\004\000\002\011\004\000\002\026\003\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\003\000\002\030\005\000\002\030\004\000" +
    "\002\031\003\000\002\031\005\000\002\037\003\000\002" +
    "\037\005\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\004\000\002\040\005\000" +
    "\002\040\003\000\002\040\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\014\010\006\012\016\013\011\014\015\015" +
    "\012\001\002\000\004\026\331\001\002\000\004\057\330" +
    "\001\002\000\006\022\025\057\uffb9\001\002\000\004\002" +
    "\024\001\002\000\016\002\ufffb\010\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\001\002\000\004\057\uffb6\001\002\000" +
    "\004\057\uffb5\001\002\000\014\010\006\012\016\013\011" +
    "\014\015\015\012\001\002\000\016\002\000\010\017\012" +
    "\016\013\011\014\015\015\012\001\002\000\004\057\uffb7" +
    "\001\002\000\004\057\uffb8\001\002\000\004\057\uffb9\001" +
    "\002\000\016\002\uffff\010\017\012\016\013\011\014\015" +
    "\015\012\001\002\000\016\002\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\001\002\000\016\002\ufffe\010\017" +
    "\012\016\013\011\014\015\015\012\001\002\000\016\002" +
    "\ufffd\010\017\012\016\013\011\014\015\015\012\001\002" +
    "\000\004\002\001\001\002\000\004\026\ufffa\001\002\000" +
    "\004\026\027\001\002\000\004\027\030\001\002\000\004" +
    "\030\031\001\002\000\040\003\ufff9\004\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\024\ufff9\031\ufff9\057\ufff9\001\002\000" +
    "\040\003\uffef\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024" +
    "\uffef\031\uffef\057\uffef\001\002\000\040\003\057\004\043" +
    "\007\063\010\017\011\041\012\016\013\011\014\015\015" +
    "\012\017\047\020\034\021\056\024\053\031\035\057\042" +
    "\001\002\000\004\026\322\001\002\000\016\002\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000\004" +
    "\055\321\001\002\000\004\055\320\001\002\000\040\003" +
    "\uffd2\004\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\024\uffd2\031" +
    "\uffd2\057\uffd2\001\002\000\032\023\104\025\115\026\105" +
    "\035\116\051\113\052\101\056\100\057\102\060\120\061" +
    "\121\062\114\063\106\001\002\000\010\026\152\032\311" +
    "\040\221\001\002\000\004\026\303\001\002\000\040\003" +
    "\uffee\004\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee\024\uffee\031" +
    "\uffee\057\uffee\001\002\000\004\057\277\001\002\000\044" +
    "\003\uffcd\004\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\024\uffcd\031\uffcd\057\uffcd\001\002\000\004\030" +
    "\247\001\002\000\004\055\246\001\002\000\004\055\245" +
    "\001\002\000\040\003\uffd1\004\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\024\uffd1\031\uffd1\057\uffd1\001\002\000\004\055" +
    "\244\001\002\000\040\003\uffe8\004\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\024\uffe8\031\uffe8\057\uffe8\001\002\000\004" +
    "\055\243\001\002\000\004\026\235\001\002\000\006\003" +
    "\057\055\233\001\002\000\040\003\ufff0\004\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\024\ufff0\031\ufff0\057\ufff0\001\002" +
    "\000\004\055\232\001\002\000\040\003\uffd3\004\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\024\uffd3\031\uffd3\057\uffd3\001" +
    "\002\000\004\026\066\001\002\000\004\055\065\001\002" +
    "\000\040\003\uffe7\004\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\024\uffe7\031\uffe7\057\uffe7\001\002\000\016\010\017\012" +
    "\016\013\011\014\015\015\012\057\071\001\002\000\004" +
    "\057\225\001\002\000\004\055\uffc4\001\002\000\004\040" +
    "\221\001\002\000\004\055\uffc3\001\002\000\004\055\074" +
    "\001\002\000\032\023\104\025\115\026\105\035\116\051" +
    "\113\052\101\056\100\057\102\060\120\061\121\062\114" +
    "\063\106\001\002\000\044\027\uffad\033\uffad\034\211\035" +
    "\215\036\213\037\217\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\053\214\054\212\055" +
    "\uffad\001\002\000\004\055\175\001\002\000\044\027\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\001\002\000\032\023\104\025" +
    "\115\026\105\035\116\051\113\052\101\056\100\057\102" +
    "\060\120\061\121\062\114\063\106\001\002\000\030\023" +
    "\uff89\025\uff89\026\uff89\035\uff89\051\uff89\052\uff89\057\uff89" +
    "\060\uff89\061\uff89\062\uff89\063\uff89\001\002\000\050\026" +
    "\152\027\uffa0\032\153\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\053\uffa0\054\uffa0\055\uffa0\001\002" +
    "\000\030\023\104\025\115\026\105\035\116\051\113\052" +
    "\101\057\102\060\120\061\121\062\114\063\106\001\002" +
    "\000\044\027\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000" +
    "\032\023\104\025\115\026\105\035\116\051\113\052\101" +
    "\056\100\057\102\060\120\061\121\062\114\063\106\001" +
    "\002\000\044\027\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\053\uffa1\054\uffa1\055\uffa1\001\002" +
    "\000\044\027\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\053\uff9c\054\uff9c\055\uff9c\001\002\000" +
    "\030\027\uffb2\033\uffb2\041\123\042\125\043\124\044\131" +
    "\045\130\046\127\047\122\050\133\055\uffb2\001\002\000" +
    "\044\027\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\053\uffa8\054\uffa8\055\uffa8\001\002\000\044" +
    "\027\uffaa\033\uffaa\034\uffaa\035\uffaa\036\140\037\141\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\053\uffaa\054\137\055\uffaa\001\002\000\030\023" +
    "\uff8a\025\uff8a\026\uff8a\035\uff8a\051\uff8a\052\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\063\uff8a\001\002\000\044\027" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\001\002\000\044\027\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\001\002\000\030\023\uff88\025" +
    "\uff88\026\uff88\035\uff88\051\uff88\052\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\001\002\000\030\027\uffb1\033" +
    "\uffb1\041\123\042\125\043\124\044\131\045\130\046\127" +
    "\047\122\050\133\055\uffb1\001\002\000\044\027\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\001\002\000\044\027\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\001\002\000\032\023\uff9b\025\uff9b\026" +
    "\uff9b\035\uff9b\051\uff9b\052\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\001\002\000\032\023\uff99\025" +
    "\uff99\026\uff99\035\uff99\051\uff99\052\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\001\002\000\032\023" +
    "\uff97\025\uff97\026\uff97\035\uff97\051\uff97\052\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\001\002\000" +
    "\032\023\uff98\025\uff98\026\uff98\035\uff98\051\uff98\052\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\001" +
    "\002\000\032\023\104\025\115\026\105\035\116\051\113" +
    "\052\101\056\100\057\102\060\120\061\121\062\114\063" +
    "\106\001\002\000\032\023\uff94\025\uff94\026\uff94\035\uff94" +
    "\051\uff94\052\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\001\002\000\032\023\uff95\025\uff95\026\uff95" +
    "\035\uff95\051\uff95\052\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\001\002\000\032\023\uff96\025\uff96" +
    "\026\uff96\035\uff96\051\uff96\052\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\001\002\000\032\023\104" +
    "\025\115\026\105\035\116\051\113\052\101\056\100\057" +
    "\102\060\120\061\121\062\114\063\106\001\002\000\032" +
    "\023\uff9a\025\uff9a\026\uff9a\035\uff9a\051\uff9a\052\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002" +
    "\000\030\027\uffac\033\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\122\050\133\055\uffac\001\002" +
    "\000\030\027\uffaf\033\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\122\050\133\055\uffaf\001\002" +
    "\000\030\023\104\025\115\026\105\035\116\051\113\052" +
    "\101\057\102\060\120\061\121\062\114\063\106\001\002" +
    "\000\030\023\uff8c\025\uff8c\026\uff8c\035\uff8c\051\uff8c\052" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\001\002" +
    "\000\030\023\uff8d\025\uff8d\026\uff8d\035\uff8d\051\uff8d\052" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002" +
    "\000\030\023\uff8b\025\uff8b\026\uff8b\035\uff8b\051\uff8b\052" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\001\002" +
    "\000\044\027\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\053\uffa7\054\uffa7\055\uffa7\001\002\000" +
    "\032\023\104\025\115\026\105\035\116\051\113\052\101" +
    "\056\100\057\102\060\120\061\121\062\114\063\106\001" +
    "\002\000\032\023\104\025\115\026\105\035\116\051\113" +
    "\052\101\056\100\057\102\060\120\061\121\062\114\063" +
    "\106\001\002\000\030\027\uffb0\033\uffb0\041\123\042\125" +
    "\043\124\044\131\045\130\046\127\047\122\050\133\055" +
    "\uffb0\001\002\000\030\027\uffae\033\uffae\041\123\042\125" +
    "\043\124\044\131\045\130\046\127\047\122\050\133\055" +
    "\uffae\001\002\000\004\027\150\001\002\000\044\027\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\001\002\000\044\027\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\001\002\000\022\023\157\025\161" +
    "\027\163\057\164\060\170\061\162\062\165\063\160\001" +
    "\002\000\032\023\104\025\115\026\105\035\116\051\113" +
    "\052\101\056\100\057\102\060\120\061\121\062\114\063" +
    "\106\001\002\000\004\033\155\001\002\000\044\027\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\001\002\000\006\027\172\064" +
    "\171\001\002\000\006\027\uff85\064\uff85\001\002\000\006" +
    "\027\uff82\064\uff82\001\002\000\006\027\uff84\064\uff84\001" +
    "\002\000\006\027\uff86\064\uff86\001\002\000\044\027\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\001\002\000\006\027\uffde\064" +
    "\uffde\001\002\000\006\027\uff83\064\uff83\001\002\000\006" +
    "\027\uffdf\064\uffdf\001\002\000\006\027\uffe0\064\uffe0\001" +
    "\002\000\006\027\uff87\064\uff87\001\002\000\020\023\157" +
    "\025\161\057\164\060\170\061\162\062\165\063\160\001" +
    "\002\000\044\027\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\053\uffe2\054\uffe2\055\uffe2\001\002" +
    "\000\006\027\uffe1\064\uffe1\001\002\000\030\027\uffab\033" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\122\050\133\055\uffab\001\002\000\010\051\177\052" +
    "\176\057\071\001\002\000\004\057\210\001\002\000\004" +
    "\057\207\001\002\000\004\027\202\001\002\000\004\027" +
    "\uffc5\001\002\000\004\030\203\001\002\000\040\003\uffc9" +
    "\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\024\uffc9\031\uffc9" +
    "\057\uffc9\001\002\000\040\003\uffef\004\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef" +
    "\020\uffef\021\uffef\024\uffef\031\uffef\057\uffef\001\002\000" +
    "\040\003\057\004\043\007\063\010\017\011\041\012\016" +
    "\013\011\014\015\015\012\017\047\020\034\021\056\024" +
    "\053\031\206\057\042\001\002\000\040\003\uffc8\004\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\024\uffc8\031\uffc8\057\uffc8" +
    "\001\002\000\004\027\uffc7\001\002\000\004\027\uffc6\001" +
    "\002\000\030\023\uff93\025\uff93\026\uff93\035\uff93\051\uff93" +
    "\052\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\001" +
    "\002\000\030\023\uff8f\025\uff8f\026\uff8f\035\uff8f\051\uff8f" +
    "\052\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\001" +
    "\002\000\030\023\uff91\025\uff91\026\uff91\035\uff91\051\uff91" +
    "\052\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\001" +
    "\002\000\030\023\uff8e\025\uff8e\026\uff8e\035\uff8e\051\uff8e" +
    "\052\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\001" +
    "\002\000\030\023\uff92\025\uff92\026\uff92\035\uff92\051\uff92" +
    "\052\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001" +
    "\002\000\030\023\104\025\115\026\105\035\116\051\113" +
    "\052\101\057\102\060\120\061\121\062\114\063\106\001" +
    "\002\000\030\023\uff90\025\uff90\026\uff90\035\uff90\051\uff90" +
    "\052\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\001" +
    "\002\000\044\027\uffa9\033\uffa9\034\uffa9\035\uffa9\036\140" +
    "\037\141\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\053\uffa9\054\137\055\uffa9\001\002" +
    "\000\036\020\034\021\056\023\104\025\115\026\105\035" +
    "\116\051\113\052\101\056\100\057\102\060\120\061\121" +
    "\062\114\063\106\001\002\000\006\027\uffda\055\uffda\001" +
    "\002\000\006\027\uffd8\055\uffd8\001\002\000\006\027\uffd9" +
    "\055\uffd9\001\002\000\006\040\226\055\uffd7\001\002\000" +
    "\036\020\034\021\056\023\104\025\115\026\105\035\116" +
    "\051\113\052\101\056\100\057\102\060\120\061\121\062" +
    "\114\063\106\001\002\000\004\055\uffd6\001\002\000\004" +
    "\055\uffd4\001\002\000\004\055\uffd5\001\002\000\040\003" +
    "\uffe6\004\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\024\uffe6\031" +
    "\uffe6\057\uffe6\001\002\000\040\003\uffb4\004\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\024\uffb4\031\uffb4\057\uffb4\001\002" +
    "\000\040\003\uffb3\004\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\024\uffb3\031\uffb3\057\uffb3\001\002\000\022\023\157\025" +
    "\161\027\236\057\237\060\170\061\162\062\165\063\160" +
    "\001\002\000\006\027\uffbc\055\uffbc\001\002\000\004\027" +
    "\242\001\002\000\004\027\241\001\002\000\006\027\uffbb" +
    "\055\uffbb\001\002\000\006\027\uffba\055\uffba\001\002\000" +
    "\040\003\uffea\004\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\024" +
    "\uffea\031\uffea\057\uffea\001\002\000\040\003\uffec\004\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\024\uffec\031\uffec\057\uffec" +
    "\001\002\000\040\003\uffe9\004\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\024\uffe9\031\uffe9\057\uffe9\001\002\000\040\003" +
    "\uffe5\004\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\024\uffe5\031" +
    "\uffe5\057\uffe5\001\002\000\040\003\uffc2\004\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\024\uffc2\031\uffc2\057\uffc2\001\002" +
    "\000\040\003\uffef\004\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\024\uffef\031\uffef\057\uffef\001\002\000\040\003\057\004" +
    "\043\007\063\010\017\011\041\012\016\013\011\014\015" +
    "\015\012\017\047\020\034\021\056\024\053\031\252\057" +
    "\042\001\002\000\004\006\uffc1\001\002\000\004\006\254" +
    "\001\002\000\004\026\255\001\002\000\032\023\104\025" +
    "\115\026\105\035\116\051\113\052\101\056\100\057\102" +
    "\060\120\061\121\062\114\063\106\001\002\000\004\027" +
    "\257\001\002\000\004\055\260\001\002\000\040\003\uffc0" +
    "\004\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\024\uffc0\031\uffc0" +
    "\057\uffc0\001\002\000\044\003\uffca\004\uffca\005\262\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\263\017\uffca\020\uffca\021\uffca\024\uffca\031\uffca\057" +
    "\uffca\001\002\000\004\030\274\001\002\000\004\026\266" +
    "\001\002\000\044\003\uffce\004\uffce\005\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\024\uffce\031\uffce\057\uffce\001" +
    "\002\000\040\003\uffd0\004\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\024\uffd0\031\uffd0\057\uffd0\001\002\000\032\023\104" +
    "\025\115\026\105\035\116\051\113\052\101\056\100\057" +
    "\102\060\120\061\121\062\114\063\106\001\002\000\004" +
    "\027\270\001\002\000\004\030\271\001\002\000\040\003" +
    "\uffef\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024\uffef\031" +
    "\uffef\057\uffef\001\002\000\040\003\057\004\043\007\063" +
    "\010\017\011\041\012\016\013\011\014\015\015\012\017" +
    "\047\020\034\021\056\024\053\031\273\057\042\001\002" +
    "\000\044\003\uffcc\004\uffcc\005\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\024\uffcc\031\uffcc\057\uffcc\001\002\000" +
    "\040\003\uffef\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024" +
    "\uffef\031\uffef\057\uffef\001\002\000\040\003\057\004\043" +
    "\007\063\010\017\011\041\012\016\013\011\014\015\015" +
    "\012\017\047\020\034\021\056\024\053\031\276\057\042" +
    "\001\002\000\040\003\uffcb\004\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\024\uffcb\031\uffcb\057\uffcb\001\002\000\010\032" +
    "\300\040\226\055\uffd7\001\002\000\032\023\104\025\115" +
    "\026\105\035\116\051\113\052\101\056\100\057\102\060" +
    "\120\061\121\062\114\063\106\001\002\000\004\033\302" +
    "\001\002\000\004\055\uffdd\001\002\000\032\023\104\025" +
    "\115\026\105\035\116\051\113\052\101\056\100\057\102" +
    "\060\120\061\121\062\114\063\106\001\002\000\004\027" +
    "\305\001\002\000\004\030\306\001\002\000\040\003\uffef" +
    "\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024\uffef\031\uffef" +
    "\057\uffef\001\002\000\040\003\057\004\043\007\063\010" +
    "\017\011\041\012\016\013\011\014\015\015\012\017\047" +
    "\020\034\021\056\024\053\031\310\057\042\001\002\000" +
    "\044\003\uffcf\004\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\024\uffcf\031\uffcf\057\uffcf\001\002\000\032" +
    "\023\104\025\115\026\105\035\116\051\113\052\101\056" +
    "\100\057\102\060\120\061\121\062\114\063\106\001\002" +
    "\000\004\033\313\001\002\000\004\040\314\001\002\000" +
    "\032\023\104\025\115\026\105\035\116\051\113\052\101" +
    "\056\100\057\102\060\120\061\121\062\114\063\106\001" +
    "\002\000\004\055\uffdc\001\002\000\004\055\317\001\002" +
    "\000\040\003\uffeb\004\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\024\uffeb\031\uffeb\057\uffeb\001\002\000\040\003\uffed\004" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\020\uffed\021\uffed\024\uffed\031\uffed\057" +
    "\uffed\001\002\000\040\003\uffe4\004\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\024\uffe4\031\uffe4\057\uffe4\001\002\000\022" +
    "\023\157\025\161\027\323\057\324\060\170\061\162\062" +
    "\165\063\160\001\002\000\006\027\uffbf\055\uffbf\001\002" +
    "\000\004\027\327\001\002\000\004\027\326\001\002\000" +
    "\006\027\uffbe\055\uffbe\001\002\000\006\027\uffbd\055\uffbd" +
    "\001\002\000\004\026\ufff5\001\002\000\020\010\017\012" +
    "\016\013\011\014\015\015\012\027\ufff2\064\ufff2\001\002" +
    "\000\004\057\344\001\002\000\006\027\336\064\335\001" +
    "\002\000\006\027\ufff4\064\ufff4\001\002\000\014\010\017" +
    "\012\016\013\011\014\015\015\012\001\002\000\004\030" +
    "\337\001\002\000\040\003\ufff7\004\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\024\ufff7\031\ufff7\057\ufff7\001\002\000\040" +
    "\003\uffef\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024\uffef" +
    "\031\uffef\057\uffef\001\002\000\040\003\057\004\043\007" +
    "\063\010\017\011\041\012\016\013\011\014\015\015\012" +
    "\017\047\020\034\021\056\024\053\031\342\057\042\001" +
    "\002\000\016\002\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\001\002\000\006\027\ufff3\064\ufff3\001\002\000" +
    "\006\027\ufff1\064\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\016\002\006\003\013\004\012\005\007\006" +
    "\003\010\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\021\005\020" +
    "\006\003\010\004\001\001\000\012\004\017\005\007\006" +
    "\003\010\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\020\006\003\010\004\001" +
    "\001\000\002\001\001\000\012\004\022\005\007\006\003" +
    "\010\004\001\001\000\010\005\020\006\003\010\004\001" +
    "\001\000\002\001\001\000\004\056\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\031\001\001\000\004\012\032\001\001\000\040\010\044" +
    "\011\043\014\057\015\036\016\054\017\050\021\047\022" +
    "\053\023\035\024\060\025\063\044\061\046\037\047\051" +
    "\050\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\021\106\026\315\027\107\030\116\031\074\036\102\037" +
    "\111\040\110\043\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\066\015\067\023\071\054\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\106\026\075\027" +
    "\107\030\116\031\074\036\102\037\111\040\110\043\076" +
    "\001\001\000\004\034\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\106\030\173\031\074\036\102" +
    "\037\111\040\110\043\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\106\036\102\040\150\043\076" +
    "\001\001\000\002\001\001\000\024\021\106\026\146\027" +
    "\107\030\116\031\074\036\102\037\111\040\110\043\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\143\033\142\001\001\000\002\001\001\000\004\035\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\131\033\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\021\106\030\134\031\074\036\102\037\111\040\110\043" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\106\030\133\031\074\036\102\037" +
    "\111\040\110\043\076\001\001\000\002\001\001\000\004" +
    "\032\131\001\001\000\004\032\131\001\001\000\012\021" +
    "\106\036\102\040\141\043\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\106\027\145\030\116\031\074\036\102\037\111" +
    "\040\110\043\076\001\001\000\022\021\106\027\144\030" +
    "\116\031\074\036\102\037\111\040\110\043\076\001\001" +
    "\000\006\032\143\033\142\001\001\000\006\032\143\033" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\155\041\165\042\166\001\001\000" +
    "\024\021\106\026\153\027\107\030\116\031\074\036\102" +
    "\037\111\040\110\043\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\165\042" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\131\001\001\000\006\023\200\055\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\203\001\001\000" +
    "\004\012\204\001\001\000\040\010\044\011\043\014\057" +
    "\015\036\016\054\017\050\021\047\022\053\023\035\024" +
    "\060\025\063\044\061\046\037\047\051\050\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\106\036\102\037" +
    "\217\040\110\043\076\001\001\000\002\001\001\000\004" +
    "\035\135\001\001\000\030\016\223\017\222\021\106\026" +
    "\221\027\107\030\116\031\074\036\102\037\111\040\110" +
    "\043\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\230\017\227" +
    "\021\106\026\226\027\107\030\116\031\074\036\102\037" +
    "\111\040\110\043\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\247\001" +
    "\001\000\004\012\250\001\001\000\040\010\044\011\043" +
    "\014\057\015\036\016\054\017\050\021\047\022\053\023" +
    "\035\024\060\025\063\044\061\046\037\047\051\050\045" +
    "\001\001\000\004\063\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\021\106\026\255\027\107\030\116" +
    "\031\074\036\102\037\111\040\110\043\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\263\052\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\021\106" +
    "\026\266\027\107\030\116\031\074\036\102\037\111\040" +
    "\110\043\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\271\001\001\000\040\010\044\011\043\014" +
    "\057\015\036\016\054\017\050\021\047\022\053\023\035" +
    "\024\060\025\063\044\061\046\037\047\051\050\045\001" +
    "\001\000\002\001\001\000\004\012\274\001\001\000\040" +
    "\010\044\011\043\014\057\015\036\016\054\017\050\021" +
    "\047\022\053\023\035\024\060\025\063\044\061\046\037" +
    "\047\051\050\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\021\106\026\300\027\107\030\116\031\074" +
    "\036\102\037\111\040\110\043\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\106\026\303\027\107" +
    "\030\116\031\074\036\102\037\111\040\110\043\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\306" +
    "\001\001\000\040\010\044\011\043\014\057\015\036\016" +
    "\054\017\050\021\047\022\053\023\035\024\060\025\063" +
    "\044\061\046\037\047\051\050\045\001\001\000\002\001" +
    "\001\000\024\021\106\026\311\027\107\030\116\031\074" +
    "\036\102\037\111\040\110\043\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\106\026\314\027\107" +
    "\030\116\031\074\036\102\037\111\040\110\043\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\333\010\331\013\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\342\010" +
    "\331\001\001\000\002\001\001\000\004\060\337\001\001" +
    "\000\004\012\340\001\001\000\040\010\044\011\043\014" +
    "\057\015\036\016\054\017\050\021\047\022\053\023\035" +
    "\024\060\025\063\044\061\046\037\047\051\050\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // define the symbol table
       private SymbolTable symbolTable = new SymbolTable();
       private String endIfLabel;

       public void report_error(String message, Object info) {
              StringBuilder m = new StringBuilder("Error de sintaxis");
              if (info instanceof java_cup.runtime.Symbol) {
              java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
              if (s.left >= 0) {
                     m.append(" en la línea "+ (s.left+1));
                     if (s.right >= 0)
                     m.append(", columna "+ (s.right+1));
              }
              m.append(": "+message);
              }
              System.err.println(m);
       }
       public String getSymbolTable(){
              return symbolTable.getPrintAllScopes();
       }


       public void printSymbolTable() {
        symbolTable.printAllScopes();
    }

    public void report_semantic_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error semántico");

    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
        if (s.left >= 0) {
            m.append(" en la línea "+ (s.left+1));
            if (s.right >= 0)
                m.append(", columna "+ (s.right+1));
        }
    }

    m.append(": "+message);
    System.err.println(m.toString());
    //System.exit(1);  // Terminate the program with an error status
   } 
   



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



       StringBuffer cod3D = new StringBuffer();
       int currentTemp = 1;
       int currentLabel = 1;
       public void imprimirCod3D() {
              System.out.println(cod3D.toString());
       }
       public String getImprimirCod3DOutput(){
              return cod3D.toString();
       }



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Main Functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Functions Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= Functions Main Functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= Functions Function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Functions ::= Function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;

                     cod3D.append("\n_main_begin: ");
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 
                     symbolTable.pushScope(); 
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Main ::= INT MAIN NT$0 LPAREN RPAREN LBRACE NT$1 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                     symbolTable.popScope(); 
                     cod3D.append("\n_main_end: ");
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
 symbolTable.pushScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Function ::= Function_id LPAREN Parameters RPAREN LBRACE NT$2 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
                     symbolTable.popScope();
                     if (symbolTable.getSymbol(id.toString()) == null) {
                            SymbolInfo info = new SymbolInfo();
                            info.setType("function");
                            symbolTable.addSymbol(((FunctionID)id).getId(),info); 
                     }else {
                    report_semantic_error("Funcion ya definida: " + id.toString(), id);
                       } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Function_id ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionID(t.toString(), id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function_id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parameters ::= Param 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameters ::= Parameters COMMA Param 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Param ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= StatementList Statement 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 s.add(e); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= 
            {
              List RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= error_until_dolar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= Declaration DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= RETURN expr DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ReadFunction DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= PrintFunction DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ControlStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= Array_assign DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Array_declaration DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= FunctionCall DOLAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                     SymbolInfo info = symbolTable.getSymbol(id.toString());
                     if (info == null){
                            report_semantic_error("Funcion no definida: " + id, id);
                     }else{
                            RESULT = id;
                     }
                    

                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Assign DOLAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunctionCall ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionCall ::= IDENTIFIER LPAREN InvocationParams RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InvocationParams ::= InvocationParams COMMA InvParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InvocationParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InvocationParams ::= InvParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InvocationParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InvParam ::= Literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InvParam",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InvParam ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InvParam",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Array_declaration ::= Type IDENTIFIER LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Array_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Array_assign ::= IDENTIFIER LBRACKET expr RBRACKET EQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Array_assign",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Array_expr ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Array_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Assign ::= IDENTIFIER EQ expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		


                 SymbolInfo info = symbolTable.getSymbol(id.toString());
                if (info == null) {
                   report_semantic_error("Identificador no definido: " + id.toString(), id);
                } if (info.getType().equals("string") && !(e instanceof String)) {
                report_semantic_error("Tipo de asignación incorrecto para: " + id.toString(), id);
            }
            else {
                     String[] partesExpr = e.toString().split("::");
                     cod3D.append("\n"+id+" = "+partesExpr[1]); 
                     info.setValue(e);
            }
           
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Assign ::= IDENTIFIER EQ ReadFunction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Assign ::= IDENTIFIER EQ PrintFunction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Declaration ::= Type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (symbolTable.getSymbol(id.toString()) == null) {
                     cod3D.append("\ndata_"+((Type)t).getTypeName()+" "+id.toString());
                     SymbolInfo info = new SymbolInfo();
                     info.setType(((Type)t).getTypeName());
                     symbolTable.addSymbol(id.toString(), info);
                     RESULT = new Declaration((Type)t, id.toString());
                } else {
                     report_semantic_error("Variable ya definida: " + id.toString(), id);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Declaration ::= Type IDENTIFIER EQ expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (symbolTable.getSymbol(id.toString()) == null) {
                    SymbolInfo info = new SymbolInfo();
                    info.setType(((Type)t).getTypeName());
                    info.setValue(e);
                    symbolTable.addSymbol(id.toString(), info);
                    RESULT = new Declaration((Type)t, id.toString());
                } else {
                    report_semantic_error("Variable ya definida: " + id.toString(), id);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Declaration ::= Type IDENTIFIER EQ ReadFunction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaration ::= Type IDENTIFIER EQ PrintFunction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ControlStructure ::= If_Structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ControlStructure",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ControlStructure ::= For_Structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ControlStructure",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ControlStructure ::= Do_While_Structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ControlStructure",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // If_Structure ::= If_Branch Elif_Structure Else_Branch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Structure",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // If_Branch ::= IF LPAREN expr RPAREN LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Branch",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Elif_Structure ::= Elif_Structure Elif_Branch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Structure",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Elif_Structure ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Structure",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Elif_Branch ::= ELIF LPAREN expr RPAREN LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Branch",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Else_Branch ::= ELSE LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else_Branch",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Else_Branch ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else_Branch",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$3 ::= 
            {
              Object RESULT =null;
 symbolTable.pushScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // For_Structure ::= FOR LPAREN Cond_for DOLAR expr DOLAR inc_for RPAREN LBRACE NT$3 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.popScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For_Structure",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inc_for ::= INCREMENT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_for",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inc_for ::= DECREMENT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_for",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inc_for ::= Assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_for",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Cond_for ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond_for",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Cond_for ::= Assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond_for",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$4 ::= 
            {
              Object RESULT =null;
 symbolTable.pushScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 symbolTable.popScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Do_While_Structure ::= DO LBRACE NT$4 StatementList RBRACE NT$5 WHILE LPAREN expr RPAREN DOLAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do_While_Structure",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReadFunction ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadFunction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReadFunction ::= READ LPAREN Literals RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadFunction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReadFunction ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadFunction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrintFunction ::= PRINT LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintFunction",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PrintFunction ::= PRINT LPAREN Literals RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintFunction",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintFunction ::= PRINT LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintFunction",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Type("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Type ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Type("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Type("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Type("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // error_until_dolar ::= error DOLAR 
            {
              Object RESULT =null;
		
                            System.err.println("Error de sintaxis. Recuperación en modo pánico activada.");
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_until_dolar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // error_until_dolar ::= error error_until_dolar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_until_dolar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr_rel 
            {
              Object RESULT =null;
		int exrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_rel ::= expr_log 
            {
              Object RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_rel ::= expr_rel op_log expr_rel 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opl +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opl+partesExpr2[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_rel ::= expr_log op_rel expr_log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opr +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opr+partesExpr2[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_rel ::= expr_rel op_rel expr_rel 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opr +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opr+partesExpr2[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_log ::= expr_bin 
            {
              Object RESULT =null;
		int exbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exb;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_log ::= expr_log op_log expr_log 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opl +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opl+partesExpr2[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_log ::= NOT expr_log 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr = el.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = NOT "+partesExpr[1]);
                            RESULT = "!"+partesExpr[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_bin ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bin",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_bin ::= expr_bin op_bin term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opb+" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opb+partesExpr2[0]+"::"+temp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bin",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= term op_mult factor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object opm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     String[] partesExpr1 = e1.toString().split("::");
                     String[] partesExpr2 = e2.toString().split("::");
                     String temp = "t"+(currentTemp++);
                     cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opm+" "+partesExpr2[1]);
                     RESULT = partesExpr1[0]+opm+partesExpr2[0]+"::"+temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int intLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + intL);
              RESULT = intL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + floatL);
              RESULT = floatL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= TRUE 
            {
              Object RESULT =null;
		int trueLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trueLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object trueL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + trueL);
              RESULT = trueL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= FALSE 
            {
              Object RESULT =null;
		int falseLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int falseLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object falseL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + falseL);
              RESULT = falseL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + charL);
              RESULT = charL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int stringLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stringL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              String temp = "t" + (currentTemp++);
              cod3D.append("\n" + temp + " = " + stringL);
              RESULT = stringL.toString() + "::" + temp;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              SymbolInfo info = symbolTable.getSymbol(id.toString());
              if (info == null){
                     report_semantic_error("Identificador no definido: " + id, id);
              }else{
                     String temp = "t" + (currentTemp++);
                     cod3D.append("\n" + temp + " = " + id);
                     RESULT = id + "::" + temp;;
              }
              

              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= op_unario factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= Array_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= FunctionCall 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     SymbolInfo info = symbolTable.getSymbol(id.toString());
                     if (info == null){
                            report_semantic_error("Funcion no definida: " + id, id);
                     }else{
                            RESULT = id;
                     }
                    

                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op_log ::= AND 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_log",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // op_log ::= OR 
            {
              Object RESULT =null;
		RESULT = "#";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_log",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_rel ::= EQEQ 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_rel ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_rel ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_rel ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_rel ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_rel ::= NOT_EQUAL 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_rel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_bin ::= PLUS 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_bin ::= MINUS 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_bin ::= MUL 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_bin ::= DIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_bin ::= MODULO 
            {
              Object RESULT =null;
		RESULT = "~";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_bin ::= POWER 
            {
              Object RESULT =null;
		RESULT = "**";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op_mult ::= MUL 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mult",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_mult ::= MODULO 
            {
              Object RESULT =null;
		RESULT = "~";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mult",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_mult ::= DIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_mult",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_unario ::= INCREMENT 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unario",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_unario ::= DECREMENT 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unario",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_unario ::= MINUS 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unario",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Literals ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Literals ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Literals ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Literals ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Literals ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Literals ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
